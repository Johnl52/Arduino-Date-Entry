// Patricks method of reading the keyboard

#include <SPI.h>
#include "Adafruit_GFX.h"
#include "Adafruit_HX8357.h"
#include "TouchScreen.h"

// These are the four touchscreen analog pins
#define YP A2  // must be an analog pin, use "An" notation!
#define XM A3  // must be an analog pin, use "An" notation!
#define YM 7   // can be a digital pin
#define XP 8   // can be a digital pin

// This is calibration data for the raw touch data to the screen coordinates
#define TS_MINX 110
#define TS_MINY 80
#define TS_MAXX 900
#define TS_MAXY 940

#define MINPRESSURE 10
#define MAXPRESSURE 1000

// Color definitions
#define BLACK    0x0000
#define BLUE     0x001F
#define RED      0xF800
#define GREEN    0x07E0
#define CYAN     0x07FF
#define MAGENTA  0xF81F
#define YELLOW   0xFFE0 
#define WHITE    0xFFFF

// These are 'flexible' lines that can be changed
#define TFT_CS 10
#define TFT_DC 9
#define TFT_RST -1  // dont use a reset pin, tie to arduino RST if you like
//#define TFT_RST 8 // RST can be set to -1 if you tie it to Arduino's reset

// Use hardware SPI (on Uno, #13, #12, #11) and the above for CS/DC
Adafruit_HX8357 tft = Adafruit_HX8357(TFT_CS, TFT_DC, TFT_RST);

// For better pressure precision, we need to know the resistance
// between X+ and X- Use any multimeter to read it
// For the one we're using, its 300 ohms across the X plate
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 300);

int x, y;

char currentPage; //, selectedUnit;
int selectedUnit = 0;

#define TOUCH_SELECTION_NONE 0
#define TOUCH_SELECTION_DATE 1

int selectedItem = TOUCH_SELECTION_NONE;
char currentDate[9] = "10/09/19";
bool screenUpdated = true;

void setup(void) {
   
  Serial.begin(9600);
  Serial1.begin(9600);
  Serial.println("Keyboard Enter");
  
  tft.begin();

  // Sets the background color of the screen to black
  tft.fillScreen(BLACK); 
  tft.setRotation(1);  // rotates screen 90' for landscape mode
  
// Button - Date
  
  tft.fillRect(50, 170, 100, 40, CYAN);
  tft.drawRect(50, 170, 100, 40, WHITE);
  tft.setCursor(80, 180);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Date"); 

  
} //End void setup

void loop() {
    /* handleScreenTouch();
     handleKeyboardPress();
     drawScreen();

     */

     // run just updateDateItem
     char keyPress = 0;
     keyPress = Serial1.read();
     updateDateItem(keyPress);
     
} // end void loop

void handleScreenTouch() {
    TSPoint p = ts.getPoint();
    // Detect Date pressed
    if ((p.x>=387) && (p.x<=475) && (p.y>=158) && (p.y<=318)) {
        selectedItem = TOUCH_SELECTION_DATE;
        Serial.println("date");
        } else {
        selectedItem = TOUCH_SELECTION_NONE;
        Serial.println("none");
    }
}

void handleKeyboardPress() {
    char keyPress = 0;
        if(Serial1.available()) {
           keyPress = Serial1.read();
         
         if (selectedItem == TOUCH_SELECTION_DATE) {
             updateDateItem(keyPress);
             
         }
        // If nothing is selected we'll read the character but drop it.
    }
} // end handleKeyboadPress()

void updateDateItem(char key) {
    static char newDate[10] = "";
    static byte newDateIndex = 0;
    if (key == '\r') {
        if (newDateIndex > 0) {
            for (int x=0;x<newDateIndex;x++) {
                 currentDate[x] = newDate[x];
            }
            newDateIndex = 0;
            screenUpdated = true;
       }
    } else if (newDateIndex < 10) {
       newDate[newDateIndex++] = key;
       Serial.println(currentDate[x]);
    }
} // end updateDateItem(char key)

void drawScreen () {
    if (screenUpdated) {
       // Redraw the screen
        screenUpdated = false;
    }
} // end drawScreen ()
