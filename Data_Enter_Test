// Test Sketch for data entry from TFT display

#include <SPI.h>
#include "Adafruit_GFX.h"
#include "Adafruit_HX8357.h"
#include "TouchScreen.h"

// These are the four touchscreen analog pins
#define YP A2  // must be an analog pin, use "An" notation!
#define XM A3  // must be an analog pin, use "An" notation!
#define YM 7   // can be a digital pin
#define XP 8   // can be a digital pin

// This is calibration data for the raw touch data to the screen coordinates
#define TS_MINX 110
#define TS_MINY 80
#define TS_MAXX 900
#define TS_MAXY 940

#define MINPRESSURE 10
#define MAXPRESSURE 1000

// Color definitions
#define BLACK    0x0000
#define BLUE     0x001F
#define RED      0xF800
#define GREEN    0x07E0
#define CYAN     0x07FF
#define MAGENTA  0xF81F
#define YELLOW   0xFFE0 
#define WHITE    0xFFFF

// These are 'flexible' lines that can be changed
#define TFT_CS 10
#define TFT_DC 9
#define TFT_RST -1  // dont use a reset pin, tie to arduino RST if you like
//#define TFT_RST 8 // RST can be set to -1 if you tie it to Arduino's reset

// Use hardware SPI (on Uno, #13, #12, #11) and the above for CS/DC
Adafruit_HX8357 tft = Adafruit_HX8357(TFT_CS, TFT_DC, TFT_RST);

// For better pressure precision, we need to know the resistance
// between X+ and X- Use any multimeter to read it
// For the one we're using, its 300 ohms across the X plate
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 300);

const byte numChars = 32;
char receivedChars[numChars];   // an array to store the received data

boolean newData = false;
boolean DateReq = false;
char Currentdate = "10/8/19";


void setup(void) {
   
  Serial.begin(9600);
  Serial1.begin(9600);
  Serial.println("TFT Display Test");
  
  tft.begin();

  // Sets the background color of the screen to black
  tft.fillScreen(BLACK); 
  tft.setRotation(1);  // rotates screen 90' for landscape mode
  
// Button - Date
  
  tft.fillRect(50, 170, 100, 40, CYAN);
  tft.drawRect(50, 170, 100, 40, WHITE);
  tft.setCursor(80, 180);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Date"); 

  
} // end void setup


void loop()
{
   // Retrieve a point on touch screen
  TSPoint p = ts.getPoint();
  
/* // for touch screen testing gives, x, y and pressure values
  // we have some minimum pressure we consider 'valid'
  // pressure of 0 means no pressing!
  if (p.z < MINPRESSURE || p.z > MAXPRESSURE) {
     return;
  }

  Serial.print("X = "); Serial.print(p.x);
  Serial.print("\tY = "); Serial.print(p.y);
  Serial.print("\tPressure = "); Serial.println(p.z);  
   
  // Scale from ~0->1000 to tft.width using the calibration #'s
  p.x = map(p.x, TS_MINX, TS_MAXX, 0, tft.width());
  p.y = map(p.y, TS_MINY, TS_MAXY, 0, tft.height());
*/



 
  // Detect Date pressed
if ((p.x>=387) && (p.x<=475) && (p.y>=158) && (p.y<=318)) {
  DateReq = true; //set the date box pressed
   
 // call read keyboard and display data
    
    recvWithEndMarker();
    showNewData();

 } // end of if ((p.x>=387) && (p.x<=475)

 // Show Date
    tft.setCursor(220, 200);
    tft.setTextColor(WHITE, BLACK);
    tft.setTextSize(2);
    tft.print(Currentdate);

} // end void loop


void recvWithEndMarker() {
    static byte ndx = 0;
    char endMarker = '\r';
    char rc;
 
    while (Serial1.available() > 0 && newData == false && DateReq == true ) { 
        rc = Serial1.read();

        if (rc != endMarker) {
            receivedChars[ndx] = rc;
            ndx++;
            if (ndx >= numChars) {
                ndx = numChars - 1;
            }
        }
        else {
            receivedChars[ndx] = '\0'; // terminate the string
            ndx = 0;
            newData = true;
        }
    }
}

void showNewData() {
    if (newData == true) {
        Serial.print("This just in ... ");
        Serial.println(receivedChars);
        newData = false;
        DateReq = false;
    }
}
